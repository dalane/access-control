'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var IsSatisfiedByInterface = require('./is-satisfied-by-interface');
module.exports = (function (_super) {
    __extends(class_1, _super);
    function class_1() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(class_1.prototype, "options", {
        /**
         * Returns an object containing the options that were set in the constructor.
         * @return {Object} Options set in constructor
         */
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(class_1.prototype, "attribute", {
        /**
         * Returns the attribute that is to be checked in the access request.
         * @return {String} The path in the accessRequest that will be checked when isSatisfied is called
         */
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(class_1.prototype, "expected", {
        /**
         * Returns the value that is to be compared to the access request as set in the constructor.
         * @return {*} The value that is expected to be at the location identified in the path. May also be another attribute in the access request with the format '${path.to.attribute}'
         */
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(class_1.prototype, "expectedIsAttribute", {
        /**
         * Identifies if the expected value is another attribute. This is set using the format ${path.to.attribute}.
         * @return {Boolean} True if the expected value is another attribute
         */
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(class_1.prototype, "expectedAttribute", {
        /**
         * If the expected value is another attribute (i.e. '${path.to.attribute}') this will return 'path.to.attribute'.
         * @return {String} The extracted expected attribute path
         */
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(class_1.prototype, "expectedValue", {
        /**
         * If the expected value was not set to be an attribute lookup this is the value that was set in the constructor.
         * @return {*} The value to be compared to the access request
         */
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks if the value found at attribute in the access request satisfies the specification rules when compared to the expected value.
     * @param  {AccessRequest}  accessRequest The access request as generated by the PEP
     * @return {Boolean}               True if the value in the access request meets the specification rules
     */
    class_1.prototype.isSatisfiedBy = function (accessRequest) {
        return true;
    };
    return class_1;
}(IsSatisfiedByInterface));
